-------------------------------------------------------------------------------
-- single-part (unsigned) crud
-------------------------------------------------------------------------------
space = box.schema.space.create('uint', { engine = 'memtx' })
---
...
pk = space:create_index('primary', { type = 'zcurve', parts = {1, 'unsigned'}, unique = true})
---
...
space:replace{0, 0}
---
- [0, 0]
...
space:replace{9, 9}
---
- [9, 9]
...
pk:get({0})
---
- [0, 0]
...
pk:get({9})
---
- [9, 9]
...
pk:update(0, {{'+', 2, 1}})
---
- [0, 1]
...
pk:update({9}, {{'+', 2, 1}})
---
- [9, 10]
...
pk:get({0})
---
- [0, 1]
...
pk:get({9})
---
- [9, 10]
...
pk:select()
---
- - [0, 1]
  - [9, 10]
...
space:delete({0})
---
- [0, 1]
...
pk:get({0})
---
...
space:delete({9})
---
- [9, 10]
...
pk:select()
---
- []
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
-------------------------------------------------------------------------------
-- single-part (unsigned)
-------------------------------------------------------------------------------
space = box.schema.space.create('uint', { engine = 'memtx' })
---
...
pk = space:create_index('primary', { type = 'zcurve', parts = {1, 'unsigned'}, unique = true})
---
...
for i=1,9 do space:replace{i} end
---
...
pk:select({}, { iterator = 'ALL' })
---
- - [1]
  - [2]
  - [3]
  - [4]
  - [5]
  - [6]
  - [7]
  - [8]
  - [9]
...
pk:select({}, { iterator = 'EQ' })
---
- - [1]
  - [2]
  - [3]
  - [4]
  - [5]
  - [6]
  - [7]
  - [8]
  - [9]
...
pk:select({}, { iterator = 'GE' })
---
- - [1]
  - [2]
  - [3]
  - [4]
  - [5]
  - [6]
  - [7]
  - [8]
  - [9]
...
pk:select({0}, { iterator = 'EQ' })
---
- []
...
pk:select({1}, { iterator = 'EQ' })
---
- - [1]
...
pk:select({5}, { iterator = 'EQ' })
---
- - [5]
...
pk:select({5}, { iterator = 'GE' })
---
- - [5]
  - [6]
  - [7]
  - [8]
  - [9]
...
pk:select({9}, { iterator = 'EQ' })
---
- - [9]
...
pk:select({9}, { iterator = 'GE' })
---
- - [9]
...
pk:select({10}, { iterator = 'EQ' })
---
- []
...
pk:select({10}, { iterator = 'GE' })
---
- []
...
pk:get({})
---
- error: Invalid key part count in an exact match (expected 1, got 0)
...
pk:get({0})
---
...
pk:get({5})
---
- [5]
...
pk:get({10})
---
...
pk:get({10, 15})
---
- error: Invalid key part count in an exact match (expected 1, got 2)
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
-------------------------------------------------------------------------------
-- single-part (string)
-------------------------------------------------------------------------------
space = box.schema.space.create('string', { engine = 'memtx' })
---
...
pk = space:create_index('primary', { type = 'zcurve', parts = {1, 'string'}, unique = true})
---
...
-- Z-order curve uses only first 8 bytes of string as key
space:insert{'123456789'}
---
- ['123456789']
...
space:insert{'12345678'}
---
- error: Duplicate key exists in unique index 'primary' in space 'string'
...
pk:select{'12345678'}
---
- - ['123456789']
...
pk:delete{'123456780'}
---
- ['123456789']
...
-- Check order
space:replace{'aaa'}
---
- ['aaa']
...
space:replace{'bbb'}
---
- ['bbb']
...
space:replace{'bbba'}
---
- ['bbba']
...
space:replace{'c'}
---
- ['c']
...
space:replace{'dddd'}
---
- ['dddd']
...
space:replace{'deee'}
---
- ['deee']
...
space:replace{'eeed'}
---
- ['eeed']
...
space:select()
---
- - ['aaa']
  - ['bbb']
  - ['bbba']
  - ['c']
  - ['dddd']
  - ['deee']
  - ['eeed']
...
space:select{'b', 'd'}
---
- - ['bbb']
  - ['bbba']
  - ['c']
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
-------------------------------------------------------------------------------
-- single-part (unsigned) range query
-------------------------------------------------------------------------------
space = box.schema.space.create('uint', { engine = 'memtx' })
---
...
pk = space:create_index('primary', { type = 'zcurve', parts = {1, 'unsigned'}, unique = true})
---
...
for i=1,9 do space:replace{i} end
---
...
pk:select({3, 5}, { iterator = 'ALL' })
---
- - [1]
  - [2]
  - [3]
  - [4]
  - [5]
  - [6]
  - [7]
  - [8]
  - [9]
...
pk:select({3, 5}, { iterator = 'EQ' })
---
- - [3]
  - [4]
  - [5]
...
pk:select({3, 5}, { iterator = 'GE' })
---
- - [3]
  - [4]
  - [5]
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
-------------------------------------------------------------------------------
-- multi-part (unsigned + unsigned)
-------------------------------------------------------------------------------
space = box.schema.space.create('multi', { engine = 'memtx' })
---
...
pk = space:create_index('primary', { type = 'zcurve', parts = {1, 'unsigned', 2, 'unsigned'}, unique = true})
---
...
space:replace{2, 4}
---
- [2, 4]
...
space:replace{2, 5}
---
- [2, 5]
...
space:replace{3, 5}
---
- [3, 5]
...
space:replace{3, 4}
---
- [3, 4]
...
space:select{}
---
- - [2, 4]
  - [3, 4]
  - [2, 5]
  - [3, 5]
...
space:select{1}
---
- error: Invalid key part count (expected [0..4], got 1)
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
-------------------------------------------------------------------------------
-- multi-part (unsigned + unsigned) range query
-------------------------------------------------------------------------------
space = box.schema.space.create('multi', { engine = 'memtx' })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {1, 'unsigned'}, unique = true})
---
...
mk = space:create_index('multi', { type = 'zcurve', parts = {2, 'unsigned', 3, 'unsigned'}})
---
...
for i=0,5 do for j=0,5 do space:insert{i * 6 + j, i, j} end end
---
...
-- returns all tuples
pk:select{}
---
- - [0, 0, 0]
  - [1, 0, 1]
  - [2, 0, 2]
  - [3, 0, 3]
  - [4, 0, 4]
  - [5, 0, 5]
  - [6, 1, 0]
  - [7, 1, 1]
  - [8, 1, 2]
  - [9, 1, 3]
  - [10, 1, 4]
  - [11, 1, 5]
  - [12, 2, 0]
  - [13, 2, 1]
  - [14, 2, 2]
  - [15, 2, 3]
  - [16, 2, 4]
  - [17, 2, 5]
  - [18, 3, 0]
  - [19, 3, 1]
  - [20, 3, 2]
  - [21, 3, 3]
  - [22, 3, 4]
  - [23, 3, 5]
  - [24, 4, 0]
  - [25, 4, 1]
  - [26, 4, 2]
  - [27, 4, 3]
  - [28, 4, 4]
  - [29, 4, 5]
  - [30, 5, 0]
  - [31, 5, 1]
  - [32, 5, 2]
  - [33, 5, 3]
  - [34, 5, 4]
  - [35, 5, 5]
...
-- returns all tuples in z-order
mk:select({2, 3, 3, 5}, {iterator = 'ALL'})
---
- - [0, 0, 0]
  - [6, 1, 0]
  - [1, 0, 1]
  - [7, 1, 1]
  - [12, 2, 0]
  - [18, 3, 0]
  - [13, 2, 1]
  - [19, 3, 1]
  - [2, 0, 2]
  - [8, 1, 2]
  - [3, 0, 3]
  - [9, 1, 3]
  - [14, 2, 2]
  - [20, 3, 2]
  - [15, 2, 3]
  - [21, 3, 3]
  - [24, 4, 0]
  - [30, 5, 0]
  - [25, 4, 1]
  - [31, 5, 1]
  - [26, 4, 2]
  - [32, 5, 2]
  - [27, 4, 3]
  - [33, 5, 3]
  - [4, 0, 4]
  - [10, 1, 4]
  - [5, 0, 5]
  - [11, 1, 5]
  - [16, 2, 4]
  - [22, 3, 4]
  - [17, 2, 5]
  - [23, 3, 5]
  - [28, 4, 4]
  - [34, 5, 4]
  - [29, 4, 5]
  - [35, 5, 5]
...
-- (2 <= x <= 3) and (3 <= x <= 5)
mk:select{2, 3, 3, 5}
---
- - [15, 2, 3]
  - [21, 3, 3]
  - [16, 2, 4]
  - [22, 3, 4]
  - [17, 2, 5]
  - [23, 3, 5]
...
-- (x == 2) and (y == 3)
mk:select{2, 3}
---
- - [15, 2, 3]
...
-- (x == 2) and (y == 3)
mk:select({2, 3}, {iterator = 'EQ'})
---
- - [15, 2, 3]
...
-- (x >= 2) and (y >= 3)
mk:select({2, 3}, {iterator = 'GE'})
---
- - [15, 2, 3]
  - [21, 3, 3]
  - [27, 4, 3]
  - [33, 5, 3]
  - [16, 2, 4]
  - [22, 3, 4]
  - [17, 2, 5]
  - [23, 3, 5]
  - [28, 4, 4]
  - [34, 5, 4]
  - [29, 4, 5]
  - [35, 5, 5]
...
-- (2 <= x <= 3)
mk:select({2, 3, box.NULL, box.NULL})
---
- - [12, 2, 0]
  - [18, 3, 0]
  - [13, 2, 1]
  - [19, 3, 1]
  - [14, 2, 2]
  - [20, 3, 2]
  - [15, 2, 3]
  - [21, 3, 3]
  - [16, 2, 4]
  - [22, 3, 4]
  - [17, 2, 5]
  - [23, 3, 5]
...
-- (3 <= y <= 5)
mk:select({box.NULL, box.NULL, 3, 5})
---
- - [3, 0, 3]
  - [9, 1, 3]
  - [15, 2, 3]
  - [21, 3, 3]
  - [27, 4, 3]
  - [33, 5, 3]
  - [4, 0, 4]
  - [10, 1, 4]
  - [5, 0, 5]
  - [11, 1, 5]
  - [16, 2, 4]
  - [22, 3, 4]
  - [17, 2, 5]
  - [23, 3, 5]
  - [28, 4, 4]
  - [34, 5, 4]
  - [29, 4, 5]
  - [35, 5, 5]
...
-- (x >= 2) and (y >= 3)
mk:select({2, box.NULL, 3, box.NULL})
---
- - [15, 2, 3]
  - [21, 3, 3]
  - [27, 4, 3]
  - [33, 5, 3]
  - [16, 2, 4]
  - [22, 3, 4]
  - [17, 2, 5]
  - [23, 3, 5]
  - [28, 4, 4]
  - [34, 5, 4]
  - [29, 4, 5]
  - [35, 5, 5]
...
-- (x <= 3) and (y <= 4)
mk:select({box.NULL, 3, box.NULL, 4})
---
- - [0, 0, 0]
  - [6, 1, 0]
  - [1, 0, 1]
  - [7, 1, 1]
  - [12, 2, 0]
  - [18, 3, 0]
  - [13, 2, 1]
  - [19, 3, 1]
  - [2, 0, 2]
  - [8, 1, 2]
  - [3, 0, 3]
  - [9, 1, 3]
  - [14, 2, 2]
  - [20, 3, 2]
  - [15, 2, 3]
  - [21, 3, 3]
  - [4, 0, 4]
  - [10, 1, 4]
  - [16, 2, 4]
  - [22, 3, 4]
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
-------------------------------------------------------------------------------
-- multi-part (float + integer)
-------------------------------------------------------------------------------
space = box.schema.space.create('multi', { engine = 'memtx' })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {1, 'unsigned'}, unique = true})
---
...
mk = space:create_index('multi', { type = 'zcurve', parts = {2, 'number', 3, 'integer'}})
---
...
for i=0,5 do for j=0,5 do space:insert{i * 6 + j, i + 0.01, j} end end
---
...
-- returns all tuples
pk:select{}
---
- - [0, 0.01, 0]
  - [1, 0.01, 1]
  - [2, 0.01, 2]
  - [3, 0.01, 3]
  - [4, 0.01, 4]
  - [5, 0.01, 5]
  - [6, 1.01, 0]
  - [7, 1.01, 1]
  - [8, 1.01, 2]
  - [9, 1.01, 3]
  - [10, 1.01, 4]
  - [11, 1.01, 5]
  - [12, 2.01, 0]
  - [13, 2.01, 1]
  - [14, 2.01, 2]
  - [15, 2.01, 3]
  - [16, 2.01, 4]
  - [17, 2.01, 5]
  - [18, 3.01, 0]
  - [19, 3.01, 1]
  - [20, 3.01, 2]
  - [21, 3.01, 3]
  - [22, 3.01, 4]
  - [23, 3.01, 5]
  - [24, 4.01, 0]
  - [25, 4.01, 1]
  - [26, 4.01, 2]
  - [27, 4.01, 3]
  - [28, 4.01, 4]
  - [29, 4.01, 5]
  - [30, 5.01, 0]
  - [31, 5.01, 1]
  - [32, 5.01, 2]
  - [33, 5.01, 3]
  - [34, 5.01, 4]
  - [35, 5.01, 5]
...
-- returns all tuples in z-order
mk:select({2, 3, 3, 5}, {iterator = 'ALL'})
---
- - [0, 0.01, 0]
  - [6, 1.01, 0]
  - [1, 0.01, 1]
  - [7, 1.01, 1]
  - [12, 2.01, 0]
  - [18, 3.01, 0]
  - [24, 4.01, 0]
  - [30, 5.01, 0]
  - [13, 2.01, 1]
  - [19, 3.01, 1]
  - [25, 4.01, 1]
  - [31, 5.01, 1]
  - [2, 0.01, 2]
  - [3, 0.01, 3]
  - [4, 0.01, 4]
  - [5, 0.01, 5]
  - [8, 1.01, 2]
  - [9, 1.01, 3]
  - [10, 1.01, 4]
  - [11, 1.01, 5]
  - [14, 2.01, 2]
  - [20, 3.01, 2]
  - [15, 2.01, 3]
  - [21, 3.01, 3]
  - [26, 4.01, 2]
  - [32, 5.01, 2]
  - [27, 4.01, 3]
  - [33, 5.01, 3]
  - [16, 2.01, 4]
  - [17, 2.01, 5]
  - [22, 3.01, 4]
  - [23, 3.01, 5]
  - [28, 4.01, 4]
  - [34, 5.01, 4]
  - [29, 4.01, 5]
  - [35, 5.01, 5]
...
-- (2 <= x <= 3) and (3 <= x <= 5)
mk:select{2, 3, 3, 5}
---
- - [15, 2.01, 3]
  - [16, 2.01, 4]
  - [17, 2.01, 5]
...
-- (x == 2.01) and (y == 3)
mk:select{2.01, 3}
---
- - [15, 2.01, 3]
...
-- (x == 2.01) and (y == 3)
mk:select({2.01, 3}, {iterator = 'EQ'})
---
- - [15, 2.01, 3]
...
-- (x >= 2.01) and (y >= 3)
mk:select({2.01, 3}, {iterator = 'GE'})
---
- - [15, 2.01, 3]
  - [21, 3.01, 3]
  - [27, 4.01, 3]
  - [33, 5.01, 3]
  - [16, 2.01, 4]
  - [17, 2.01, 5]
  - [22, 3.01, 4]
  - [23, 3.01, 5]
  - [28, 4.01, 4]
  - [34, 5.01, 4]
  - [29, 4.01, 5]
  - [35, 5.01, 5]
...
-- (2 <= x <= 3.01)
mk:select({2, 3.01, box.NULL, box.NULL})
---
- - [12, 2.01, 0]
  - [18, 3.01, 0]
  - [13, 2.01, 1]
  - [19, 3.01, 1]
  - [14, 2.01, 2]
  - [20, 3.01, 2]
  - [15, 2.01, 3]
  - [21, 3.01, 3]
  - [16, 2.01, 4]
  - [17, 2.01, 5]
  - [22, 3.01, 4]
  - [23, 3.01, 5]
...
-- (3 <= y <= 5)
mk:select({box.NULL, box.NULL, 3, 5})
---
- - [3, 0.01, 3]
  - [4, 0.01, 4]
  - [5, 0.01, 5]
  - [9, 1.01, 3]
  - [10, 1.01, 4]
  - [11, 1.01, 5]
  - [15, 2.01, 3]
  - [21, 3.01, 3]
  - [27, 4.01, 3]
  - [33, 5.01, 3]
  - [16, 2.01, 4]
  - [17, 2.01, 5]
  - [22, 3.01, 4]
  - [23, 3.01, 5]
  - [28, 4.01, 4]
  - [34, 5.01, 4]
  - [29, 4.01, 5]
  - [35, 5.01, 5]
...
-- (x >= 2) and (y >= 3)
mk:select({2, box.NULL, 3, box.NULL})
---
- - [15, 2.01, 3]
  - [21, 3.01, 3]
  - [27, 4.01, 3]
  - [33, 5.01, 3]
  - [16, 2.01, 4]
  - [17, 2.01, 5]
  - [22, 3.01, 4]
  - [23, 3.01, 5]
  - [28, 4.01, 4]
  - [34, 5.01, 4]
  - [29, 4.01, 5]
  - [35, 5.01, 5]
...
-- (x <= 3) and (y <= 4)
mk:select({box.NULL, 3, box.NULL, 4})
---
- - [0, 0.01, 0]
  - [6, 1.01, 0]
  - [1, 0.01, 1]
  - [7, 1.01, 1]
  - [12, 2.01, 0]
  - [13, 2.01, 1]
  - [2, 0.01, 2]
  - [3, 0.01, 3]
  - [4, 0.01, 4]
  - [8, 1.01, 2]
  - [9, 1.01, 3]
  - [10, 1.01, 4]
  - [14, 2.01, 2]
  - [15, 2.01, 3]
  - [16, 2.01, 4]
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
