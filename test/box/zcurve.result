-------------------------------------------------------------------------------
-- can't be unique
-------------------------------------------------------------------------------
space = box.schema.space.create('uint', { engine = 'memtx' })
---
...
pk = space:create_index('primary', { type = 'zcurve', parts = {{1, 'unsigned'}}, unique = true})
---
- error: 'Can''t create or modify index ''primary'' in space ''uint'': ZCURVE can
    not be unique'
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
-------------------------------------------------------------------------------
-- single-part (unsigned) crud
-------------------------------------------------------------------------------
space = box.schema.space.create('uint', { engine = 'memtx' })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {{1, 'unsigned'}}})
---
...
sk = space:create_index('secondary', { type = 'zcurve', parts = {{2, 'unsigned'}}})
---
...
space:replace({0, 0})
---
- [0, 0]
...
space:replace({9, 9})
---
- [9, 9]
...
sk:select({0})
---
- - [0, 0]
...
sk:select({9})
---
- - [9, 9]
...
pk:update({0}, {{'+', 2, 1}})
---
- [0, 1]
...
pk:update({9}, {{'+', 2, 1}})
---
- [9, 10]
...
sk:select({0})
---
- []
...
sk:select({1})
---
- - [0, 1]
...
sk:select({9})
---
- []
...
sk:select({10})
---
- - [9, 10]
...
sk:select()
---
- - [0, 1]
  - [9, 10]
...
space:delete({0})
---
- [0, 1]
...
sk:select({0})
---
- []
...
space:delete({9})
---
- [9, 10]
...
sk:select()
---
- []
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
sk = nil
---
...
-------------------------------------------------------------------------------
-- single-part (unsigned)
-------------------------------------------------------------------------------
space = box.schema.space.create('uint', { engine = 'memtx' })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {{1, 'unsigned'}}, unique = true})
---
...
sk = space:create_index('secondary', { type = 'zcurve', parts = {{2, 'unsigned'}}})
---
...
for i=1,9 do space:replace{i, i} end
---
...
sk:select({}, { iterator = 'ALL' })
---
- - [1, 1]
  - [2, 2]
  - [3, 3]
  - [4, 4]
  - [5, 5]
  - [6, 6]
  - [7, 7]
  - [8, 8]
  - [9, 9]
...
sk:select({}, { iterator = 'EQ' })
---
- - [1, 1]
  - [2, 2]
  - [3, 3]
  - [4, 4]
  - [5, 5]
  - [6, 6]
  - [7, 7]
  - [8, 8]
  - [9, 9]
...
sk:select({}, { iterator = 'GE' })
---
- - [1, 1]
  - [2, 2]
  - [3, 3]
  - [4, 4]
  - [5, 5]
  - [6, 6]
  - [7, 7]
  - [8, 8]
  - [9, 9]
...
sk:select({0}, { iterator = 'EQ' })
---
- []
...
sk:select({1}, { iterator = 'EQ' })
---
- - [1, 1]
...
sk:select({5}, { iterator = 'EQ' })
---
- - [5, 5]
...
sk:select({5}, { iterator = 'GE' })
---
- - [5, 5]
  - [6, 6]
  - [7, 7]
  - [8, 8]
  - [9, 9]
...
sk:select({9}, { iterator = 'EQ' })
---
- - [9, 9]
...
sk:select({9}, { iterator = 'GE' })
---
- - [9, 9]
...
sk:select({10}, { iterator = 'EQ' })
---
- []
...
sk:select({10}, { iterator = 'GE' })
---
- []
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
sk = nil
---
...
-------------------------------------------------------------------------------
-- single-part (string)
-------------------------------------------------------------------------------
space = box.schema.space.create('string', { engine = 'memtx' })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {{1, 'unsigned'}}, unique = true})
---
...
sk = space:create_index('secondary', { type = 'zcurve', parts = {{2, 'string'}}})
---
...
-- Z-order curve uses only first 8 bytes of string as key
space:insert{1, '123456789'}
---
- [1, '123456789']
...
space:insert{2, '12345678'}
---
- [2, '12345678']
...
sk:select{'12345678'}
---
- - [1, '123456789']
  - [2, '12345678']
...
sk:select{'123456780'}
---
- - [1, '123456789']
  - [2, '12345678']
...
-- Check order
space:replace{1, 'aaa'}
---
- [1, 'aaa']
...
space:replace{2, 'bbb'}
---
- [2, 'bbb']
...
space:replace{3, 'bbba'}
---
- [3, 'bbba']
...
space:replace{4, 'c'}
---
- [4, 'c']
...
space:replace{5, 'dddd'}
---
- [5, 'dddd']
...
space:replace{6, 'deee'}
---
- [6, 'deee']
...
space:replace{7, 'eeed'}
---
- [7, 'eeed']
...
sk:select()
---
- - [1, 'aaa']
  - [2, 'bbb']
  - [3, 'bbba']
  - [4, 'c']
  - [5, 'dddd']
  - [6, 'deee']
  - [7, 'eeed']
...
sk:select{'b', 'd'}
---
- - [2, 'bbb']
  - [3, 'bbba']
  - [4, 'c']
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
sk = nil
---
...
-------------------------------------------------------------------------------
-- single-part (unsigned) range query
-------------------------------------------------------------------------------
space = box.schema.space.create('uint', { engine = 'memtx' })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {{1, 'unsigned'}}, unique = true})
---
...
sk = space:create_index('secondary', { type = 'zcurve', parts = {{1, 'unsigned'}}})
---
...
for i=1,9 do space:replace{i, i} end
---
...
sk:select({3, 5}, { iterator = 'ALL' })
---
- - [1, 1]
  - [2, 2]
  - [3, 3]
  - [4, 4]
  - [5, 5]
  - [6, 6]
  - [7, 7]
  - [8, 8]
  - [9, 9]
...
sk:select({3, 5}, { iterator = 'EQ' })
---
- - [3, 3]
  - [4, 4]
  - [5, 5]
...
sk:select({3, 5}, { iterator = 'GE' })
---
- - [3, 3]
  - [4, 4]
  - [5, 5]
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
sk = nil
---
...
-------------------------------------------------------------------------------
-- multi-part (unsigned + unsigned)
-------------------------------------------------------------------------------
space = box.schema.space.create('unsigned_unsigned', { engine = 'memtx' })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {{1, 'unsigned'}}, unique = true})
---
...
sk = space:create_index('secondary', { type = 'zcurve', parts = {{2, 'unsigned'}, {3, 'unsigned'}}})
---
...
space:replace{1, 2, 4}
---
- [1, 2, 4]
...
space:replace{2, 2, 5}
---
- [2, 2, 5]
...
space:replace{3, 3, 5}
---
- [3, 3, 5]
...
space:replace{4, 3, 4}
---
- [4, 3, 4]
...
sk:select{}
---
- - [1, 2, 4]
  - [4, 3, 4]
  - [2, 2, 5]
  - [3, 3, 5]
...
sk:select{1}
---
- error: Invalid key part count (expected [0..4], got 1)
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
sk = nil
---
...
-------------------------------------------------------------------------------
-- multi-part (unsigned + unsigned) range query
-------------------------------------------------------------------------------
space = box.schema.space.create('unsigned_unsigned', { engine = 'memtx' })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {{1, 'unsigned'}}, unique = true})
---
...
sk = space:create_index('secondary', { type = 'zcurve', parts = {{2, 'unsigned'}, {3, 'unsigned'}}})
---
...
for i=0,5 do for j=0,5 do space:insert{i * 6 + j, i, j} end end
---
...
-- returns all tuples
pk:select{}
---
- - [0, 0, 0]
  - [1, 0, 1]
  - [2, 0, 2]
  - [3, 0, 3]
  - [4, 0, 4]
  - [5, 0, 5]
  - [6, 1, 0]
  - [7, 1, 1]
  - [8, 1, 2]
  - [9, 1, 3]
  - [10, 1, 4]
  - [11, 1, 5]
  - [12, 2, 0]
  - [13, 2, 1]
  - [14, 2, 2]
  - [15, 2, 3]
  - [16, 2, 4]
  - [17, 2, 5]
  - [18, 3, 0]
  - [19, 3, 1]
  - [20, 3, 2]
  - [21, 3, 3]
  - [22, 3, 4]
  - [23, 3, 5]
  - [24, 4, 0]
  - [25, 4, 1]
  - [26, 4, 2]
  - [27, 4, 3]
  - [28, 4, 4]
  - [29, 4, 5]
  - [30, 5, 0]
  - [31, 5, 1]
  - [32, 5, 2]
  - [33, 5, 3]
  - [34, 5, 4]
  - [35, 5, 5]
...
-- returns all tuples in z-order
sk:select({2, 3, 3, 5}, {iterator = 'ALL'})
---
- - [0, 0, 0]
  - [6, 1, 0]
  - [1, 0, 1]
  - [7, 1, 1]
  - [12, 2, 0]
  - [18, 3, 0]
  - [13, 2, 1]
  - [19, 3, 1]
  - [2, 0, 2]
  - [8, 1, 2]
  - [3, 0, 3]
  - [9, 1, 3]
  - [14, 2, 2]
  - [20, 3, 2]
  - [15, 2, 3]
  - [21, 3, 3]
  - [24, 4, 0]
  - [30, 5, 0]
  - [25, 4, 1]
  - [31, 5, 1]
  - [26, 4, 2]
  - [32, 5, 2]
  - [27, 4, 3]
  - [33, 5, 3]
  - [4, 0, 4]
  - [10, 1, 4]
  - [5, 0, 5]
  - [11, 1, 5]
  - [16, 2, 4]
  - [22, 3, 4]
  - [17, 2, 5]
  - [23, 3, 5]
  - [28, 4, 4]
  - [34, 5, 4]
  - [29, 4, 5]
  - [35, 5, 5]
...
-- (2 <= x <= 3) and (3 <= x <= 5)
sk:select{2, 3, 3, 5}
---
- - [15, 2, 3]
  - [21, 3, 3]
  - [16, 2, 4]
  - [22, 3, 4]
  - [17, 2, 5]
  - [23, 3, 5]
...
-- (x == 2) and (y == 3)
sk:select{2, 3}
---
- - [15, 2, 3]
...
-- (x == 2) and (y == 3)
sk:select({2, 3}, {iterator = 'EQ'})
---
- - [15, 2, 3]
...
-- (x >= 2) and (y >= 3)
sk:select({2, 3}, {iterator = 'GE'})
---
- - [15, 2, 3]
  - [21, 3, 3]
  - [27, 4, 3]
  - [33, 5, 3]
  - [16, 2, 4]
  - [22, 3, 4]
  - [17, 2, 5]
  - [23, 3, 5]
  - [28, 4, 4]
  - [34, 5, 4]
  - [29, 4, 5]
  - [35, 5, 5]
...
-- (2 <= x <= 3)
sk:select({2, 3, box.NULL, box.NULL})
---
- - [12, 2, 0]
  - [18, 3, 0]
  - [13, 2, 1]
  - [19, 3, 1]
  - [14, 2, 2]
  - [20, 3, 2]
  - [15, 2, 3]
  - [21, 3, 3]
  - [16, 2, 4]
  - [22, 3, 4]
  - [17, 2, 5]
  - [23, 3, 5]
...
-- (3 <= y <= 5)
sk:select({box.NULL, box.NULL, 3, 5})
---
- - [3, 0, 3]
  - [9, 1, 3]
  - [15, 2, 3]
  - [21, 3, 3]
  - [27, 4, 3]
  - [33, 5, 3]
  - [4, 0, 4]
  - [10, 1, 4]
  - [5, 0, 5]
  - [11, 1, 5]
  - [16, 2, 4]
  - [22, 3, 4]
  - [17, 2, 5]
  - [23, 3, 5]
  - [28, 4, 4]
  - [34, 5, 4]
  - [29, 4, 5]
  - [35, 5, 5]
...
-- (x >= 2) and (y >= 3)
sk:select({2, box.NULL, 3, box.NULL})
---
- - [15, 2, 3]
  - [21, 3, 3]
  - [27, 4, 3]
  - [33, 5, 3]
  - [16, 2, 4]
  - [22, 3, 4]
  - [17, 2, 5]
  - [23, 3, 5]
  - [28, 4, 4]
  - [34, 5, 4]
  - [29, 4, 5]
  - [35, 5, 5]
...
-- (x <= 3) and (y <= 4)
sk:select({box.NULL, 3, box.NULL, 4})
---
- - [0, 0, 0]
  - [6, 1, 0]
  - [1, 0, 1]
  - [7, 1, 1]
  - [12, 2, 0]
  - [18, 3, 0]
  - [13, 2, 1]
  - [19, 3, 1]
  - [2, 0, 2]
  - [8, 1, 2]
  - [3, 0, 3]
  - [9, 1, 3]
  - [14, 2, 2]
  - [20, 3, 2]
  - [15, 2, 3]
  - [21, 3, 3]
  - [4, 0, 4]
  - [10, 1, 4]
  - [16, 2, 4]
  - [22, 3, 4]
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
sk = nil
---
...
-------------------------------------------------------------------------------
-- multi-part (float + integer)
-------------------------------------------------------------------------------
space = box.schema.space.create('float_integer', { engine = 'memtx' })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {{1, 'unsigned'}}, unique = true})
---
...
sk = space:create_index('secondary', { type = 'zcurve', parts = {{2, 'number'}, {3, 'integer'}}})
---
...
for i=0,5 do for j=0,5 do space:insert{i * 6 + j, i + 0.01, j} end end
---
...
-- returns all tuples
pk:select{}
---
- - [0, 0.01, 0]
  - [1, 0.01, 1]
  - [2, 0.01, 2]
  - [3, 0.01, 3]
  - [4, 0.01, 4]
  - [5, 0.01, 5]
  - [6, 1.01, 0]
  - [7, 1.01, 1]
  - [8, 1.01, 2]
  - [9, 1.01, 3]
  - [10, 1.01, 4]
  - [11, 1.01, 5]
  - [12, 2.01, 0]
  - [13, 2.01, 1]
  - [14, 2.01, 2]
  - [15, 2.01, 3]
  - [16, 2.01, 4]
  - [17, 2.01, 5]
  - [18, 3.01, 0]
  - [19, 3.01, 1]
  - [20, 3.01, 2]
  - [21, 3.01, 3]
  - [22, 3.01, 4]
  - [23, 3.01, 5]
  - [24, 4.01, 0]
  - [25, 4.01, 1]
  - [26, 4.01, 2]
  - [27, 4.01, 3]
  - [28, 4.01, 4]
  - [29, 4.01, 5]
  - [30, 5.01, 0]
  - [31, 5.01, 1]
  - [32, 5.01, 2]
  - [33, 5.01, 3]
  - [34, 5.01, 4]
  - [35, 5.01, 5]
...
-- returns all tuples in z-order
sk:select({2, 3, 3, 5}, {iterator = 'ALL'})
---
- - [0, 0.01, 0]
  - [6, 1.01, 0]
  - [1, 0.01, 1]
  - [7, 1.01, 1]
  - [12, 2.01, 0]
  - [18, 3.01, 0]
  - [24, 4.01, 0]
  - [30, 5.01, 0]
  - [13, 2.01, 1]
  - [19, 3.01, 1]
  - [25, 4.01, 1]
  - [31, 5.01, 1]
  - [2, 0.01, 2]
  - [3, 0.01, 3]
  - [4, 0.01, 4]
  - [5, 0.01, 5]
  - [8, 1.01, 2]
  - [9, 1.01, 3]
  - [10, 1.01, 4]
  - [11, 1.01, 5]
  - [14, 2.01, 2]
  - [20, 3.01, 2]
  - [15, 2.01, 3]
  - [21, 3.01, 3]
  - [26, 4.01, 2]
  - [32, 5.01, 2]
  - [27, 4.01, 3]
  - [33, 5.01, 3]
  - [16, 2.01, 4]
  - [17, 2.01, 5]
  - [22, 3.01, 4]
  - [23, 3.01, 5]
  - [28, 4.01, 4]
  - [34, 5.01, 4]
  - [29, 4.01, 5]
  - [35, 5.01, 5]
...
-- (2 <= x <= 3) and (3 <= x <= 5)
sk:select{2, 3, 3, 5}
---
- - [15, 2.01, 3]
  - [16, 2.01, 4]
  - [17, 2.01, 5]
...
-- (x == 2.01) and (y == 3)
sk:select{2.01, 3}
---
- - [15, 2.01, 3]
...
-- (x == 2.01) and (y == 3)
sk:select({2.01, 3}, {iterator = 'EQ'})
---
- - [15, 2.01, 3]
...
-- (x >= 2.01) and (y >= 3)
sk:select({2.01, 3}, {iterator = 'GE'})
---
- - [15, 2.01, 3]
  - [21, 3.01, 3]
  - [27, 4.01, 3]
  - [33, 5.01, 3]
  - [16, 2.01, 4]
  - [17, 2.01, 5]
  - [22, 3.01, 4]
  - [23, 3.01, 5]
  - [28, 4.01, 4]
  - [34, 5.01, 4]
  - [29, 4.01, 5]
  - [35, 5.01, 5]
...
-- (2 <= x <= 3.01)
sk:select({2, 3.01, box.NULL, box.NULL})
---
- - [12, 2.01, 0]
  - [18, 3.01, 0]
  - [13, 2.01, 1]
  - [19, 3.01, 1]
  - [14, 2.01, 2]
  - [20, 3.01, 2]
  - [15, 2.01, 3]
  - [21, 3.01, 3]
  - [16, 2.01, 4]
  - [17, 2.01, 5]
  - [22, 3.01, 4]
  - [23, 3.01, 5]
...
-- (3 <= y <= 5)
sk:select({box.NULL, box.NULL, 3, 5})
---
- - [3, 0.01, 3]
  - [4, 0.01, 4]
  - [5, 0.01, 5]
  - [9, 1.01, 3]
  - [10, 1.01, 4]
  - [11, 1.01, 5]
  - [15, 2.01, 3]
  - [21, 3.01, 3]
  - [27, 4.01, 3]
  - [33, 5.01, 3]
  - [16, 2.01, 4]
  - [17, 2.01, 5]
  - [22, 3.01, 4]
  - [23, 3.01, 5]
  - [28, 4.01, 4]
  - [34, 5.01, 4]
  - [29, 4.01, 5]
  - [35, 5.01, 5]
...
-- (x >= 2) and (y >= 3)
sk:select({2, box.NULL, 3, box.NULL})
---
- - [15, 2.01, 3]
  - [21, 3.01, 3]
  - [27, 4.01, 3]
  - [33, 5.01, 3]
  - [16, 2.01, 4]
  - [17, 2.01, 5]
  - [22, 3.01, 4]
  - [23, 3.01, 5]
  - [28, 4.01, 4]
  - [34, 5.01, 4]
  - [29, 4.01, 5]
  - [35, 5.01, 5]
...
-- (x <= 3) and (y <= 4)
sk:select({box.NULL, 3, box.NULL, 4})
---
- - [0, 0.01, 0]
  - [6, 1.01, 0]
  - [1, 0.01, 1]
  - [7, 1.01, 1]
  - [12, 2.01, 0]
  - [13, 2.01, 1]
  - [2, 0.01, 2]
  - [3, 0.01, 3]
  - [4, 0.01, 4]
  - [8, 1.01, 2]
  - [9, 1.01, 3]
  - [10, 1.01, 4]
  - [14, 2.01, 2]
  - [15, 2.01, 3]
  - [16, 2.01, 4]
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
sk = nil
---
...
-------------------------------------------------------------------------------
-- multi-part non-unique (float + integer)
-------------------------------------------------------------------------------
space = box.schema.space.create('float_integer', { engine = 'memtx' })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {{1, 'unsigned'}}, unique = true})
---
...
sk = space:create_index('secondary', { type = 'zcurve', parts = {{2, 'number'}, {3, 'integer'}}, unique = false})
---
...
space:insert{1, 2, 3}
---
- [1, 2, 3]
...
space:insert{2, 2, 3}
---
- [2, 2, 3]
...
space:insert{3, 2, 3}
---
- [3, 2, 3]
...
space:insert{4, 3, 4}
---
- [4, 3, 4]
...
space:insert{5, 3, 4}
---
- [5, 3, 4]
...
space:insert{6, 3, 4}
---
- [6, 3, 4]
...
space:insert{7, 3, 5}
---
- [7, 3, 5]
...
space:insert{8, 3, 5}
---
- [8, 3, 5]
...
space:insert{9, 3, 5}
---
- [9, 3, 5]
...
-- returns all tuples
pk:select{}
---
- - [1, 2, 3]
  - [2, 2, 3]
  - [3, 2, 3]
  - [4, 3, 4]
  - [5, 3, 4]
  - [6, 3, 4]
  - [7, 3, 5]
  - [8, 3, 5]
  - [9, 3, 5]
...
-- returns tuples in range
sk:select{3, 3, 4, 4}
---
- - [4, 3, 4]
  - [5, 3, 4]
  - [6, 3, 4]
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
sk = nil
---
...
-------------------------------------------------------------------------------
-- nullable fields is prohibited
-------------------------------------------------------------------------------
space = box.schema.space.create('zcurve_nullable', { engine = 'memtx' })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {{1, 'unsigned'}}, unique = true})
---
...
sk = space:create_index('secondary', { type = 'zcurve', parts = {{2, 'unsigned', is_nullable = true}}, unique = false})
---
- error: ZCURVE does not support nullable parts
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
sk = nil
---
...
